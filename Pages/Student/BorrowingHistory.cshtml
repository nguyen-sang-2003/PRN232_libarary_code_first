@page "/borrowing-history"
@using static PrnContext
@model LibararyWebApplication.Pages.Student.BorrowingHistoryModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<!-- Custom CSS -->
<style>
    .borrowing-history-page {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px 0;
    }

    .main-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 30px;
        margin-top: 20px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 3px solid #f8f9fa;
    }

    .page-title {
        color: #2c3e50;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .page-subtitle {
        color: #7f8c8d;
        font-size: 1.1rem;
        font-weight: 300;
    }

    .stats-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px;
        border: none;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        transition: transform 0.3s ease;
    }

    .stats-card:hover {
        transform: translateY(-5px);
    }

    .stats-card .card-header {
        background: rgba(255,255,255,0.1);
        border-bottom: 1px solid rgba(255,255,255,0.2);
        border-radius: 15px 15px 0 0 !important;
        padding: 20px;
    }

    .stats-card .card-body {
        padding: 25px;
    }

    .stats-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .stats-item:last-child {
        border-bottom: none;
    }

    .stats-label {
        font-weight: 500;
        font-size: 0.95rem;
    }

    .stats-value {
        font-weight: 700;
        font-size: 1.2rem;
        background: rgba(255,255,255,0.2);
        padding: 5px 15px;
        border-radius: 20px;
    }

    .history-table {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .history-table .table {
        margin-bottom: 0;
    }

    .history-table thead {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        color: white;
    }

    .history-table th {
        border: none;
        padding: 20px 15px;
        font-weight: 600;
        font-size: 0.95rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .history-table tbody tr {
        transition: all 0.3s ease;
        border-bottom: 1px solid #f8f9fa;
    }

    .history-table tbody tr:hover {
        background-color: #f8f9fa;
        transform: scale(1.01);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .history-table td {
        padding: 18px 15px;
        vertical-align: middle;
        border: none;
    }

    .book-title {
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.1rem;
    }

    .date-cell {
        font-family: 'Courier New', monospace;
        font-weight: 500;
        color: #555;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-borrowed {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }

    .status-returned {
        background: linear-gradient(135deg, #27ae60, #229954);
        color: white;
    }

    .status-overdue {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }

    .overdue-row {
        background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%) !important;
        border-left: 5px solid #e74c3c;
    }

    .overdue-text {
        color: #e74c3c;
        font-weight: 700;
        font-size: 0.9rem;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        border: 2px dashed #dee2e6;
    }

    .empty-state i {
        font-size: 4rem;
        color: #adb5bd;
        margin-bottom: 20px;
    }

    .empty-state h4 {
        color: #6c757d;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .empty-state p {
        color: #868e96;
        font-size: 1.1rem;
        margin-bottom: 25px;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-custom {
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        border: none;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .btn-custom:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .btn-home {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
    }

    .btn-back {
        background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        color: white;
    }

    .btn-primary-custom {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }

    .alert-custom {
        border-radius: 15px;
        border: none;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .alert-info-custom {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        color: #0c5460;
        border-left: 5px solid #17a2b8;
    }

    .renew-count {
        background: #f8f9fa;
        color: #6c757d;
        padding: 5px 12px;
        border-radius: 15px;
        font-weight: 600;
        font-size: 0.9rem;
        border: 2px solid #e9ecef;
    }
</style>

<div class="borrowing-history-page">
    <div class="container">
        <div class="main-container">
            <div class="page-header">
                <h1 class="page-title">
                    <i class="fas fa-history"></i> Borrowing History
                </h1>
                <p class="page-subtitle">Track the books you have borrowed from the library</p>
            </div>

    @if (Model.Message != null)
    {
        <div class="alert alert-info-custom alert-custom">
            <i class="fas fa-info-circle me-2"></i>@Model.Message
        </div>
        @if (Model.Message.Contains("đăng nhập"))
        {
            <div class="text-center mt-3">
                <a href="/login?return_url=@System.Web.HttpUtility.UrlEncode("/borrowing-history")" class="btn btn-primary-custom btn-custom">
                    <i class="fas fa-sign-in-alt me-2"></i>Login
                </a>
            </div>
        }
    }

    @if (Model.Borrowings.Count > 0)
    {
        <div class="history-table">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-hashtag me-2"></i>No.</th>
                            <th><i class="fas fa-book me-2"></i>Book Title</th>
                            <th><i class="fas fa-calendar-plus me-2"></i>Borrow Date</th>
                            <th><i class="fas fa-calendar-check me-2"></i>Due Date</th>
                            <th><i class="fas fa-info-circle me-2"></i>Status</th>
                            <th><i class="fas fa-cogs me-2"></i>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Borrowings.Count; i++)
                        {
                            var item = Model.Borrowings[i];
                            var isOverdue = item.DueDate < DateTime.Now && item.Status == RentalStatus.Pending;
                            var rowClass = isOverdue ? "overdue-row" : "";

                            <tr class="@rowClass">
                                <td><span class="badge bg-secondary">@(i + 1)</span></td>
                                <td><span class="book-title">@item.BookTitle</span></td>
                                <td><span class="date-cell">@item.RentalDate.ToString("dd/MM/yyyy")</span></td>
                                <td>
                                    @if (isOverdue)
                                    {
                                        <span class="overdue-text">
                                            <i class="fas fa-exclamation-triangle me-1"></i>
                                            @item.DueDate.ToString("dd/MM/yyyy") (Overdue)
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="date-cell">@item.DueDate.ToString("dd/MM/yyyy")</span>
                                    }
                                </td>
                                <td>
                                    @if (item.Status == RentalStatus.Pending)
                                    {
                                        <span class="status-badge status-pending">
                                            <i class="fas fa-hourglass-half me-1"></i>Pending
                                        </span>
                                    }
                                    else if (item.Status == RentalStatus.Approved)
                                    {
                                        <span class="status-badge status-borrowed">
                                            <i class="fas fa-book-open me-1"></i>Borrowed
                                        </span>
                                    }
                                    else if (item.Status == RentalStatus.Returned)
                                    {
                                        <span class="status-badge status-returned">
                                            <i class="fas fa-check-circle me-1"></i>Returned
                                        </span>
                                    }
                                    else if (item.Status == RentalStatus.Cancelled)
                                    {
                                        <span class="status-badge status-cancelled">
                                            <i class="fas fa-times-circle me-1"></i>Cancelled
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-unknown">@item.Status</span>
                                    }
                                </td>
                                <td>
                                    @if (item.Status == RentalStatus.Pending)
                                    {
                                        <button class="btn btn-danger btn-sm cancel-btn" data-rentalid="@item.Id">
                                            <i class="fas fa-times me-1"></i>Cancel
                                        </button>
                                    }
                                    else if (item.Status == RentalStatus.Approved)
                                    {
                                        <a href="/DetailRetail/@item.Id" class="btn btn-warning btn-sm renew-btn">
                                            <i class="fas fa-sync-alt me-1"></i> Renew
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-6">
                <div class="card stats-card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-bar me-2"></i>Borrowing Statistics
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="stats-item">
                            <span class="stats-label">
                                <i class="fas fa-books me-2"></i>Total Book Borrowed
                            </span>
                            <span class="stats-value">@Model.Borrowings.Count</span>
                        </div>
                        <div class="stats-item">
                            <span class="stats-label">
                                <i class="fas fa-book-open me-2"></i>Borrowed Book
                            </span>
                            <span class="stats-value">@Model.Borrowings.Count(b => b.Status == RentalStatus.Pending)</span>
                        </div>
                        <div class="stats-item">
                            <span class="stats-label">
                                <i class="fas fa-check-circle me-2"></i>Return Book
                            </span>
                            <span class="stats-value">@Model.Borrowings.Count(b => b.Status == "returned")</span>
                        </div>
                        <div class="stats-item">
                            <span class="stats-label">
                                <i class="fas fa-exclamation-triangle me-2"></i>Overdue
                            </span>
                            <span class="stats-value">@Model.Borrowings.Count(b => b.DueDate < DateTime.Now && b.Status == RentalStatus.Pending)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-book-open"></i>
            <h4>No borrowing history</h4>
            <p>You have not borrowed any books from the library yet. Start exploring our book collection!</p>
            <div class="action-buttons">
                <a href="/" class="btn btn-primary-custom btn-custom">
                    <i class="fas fa-book me-2"></i>Borrow Book
                </a>
            </div>
        </div>
    }

    <div class="action-buttons mt-4">
        <a href="/" class="btn btn-home btn-custom">
            <i class="fas fa-home me-2"></i>Home
        </a>
        <a href="javascript:history.back()" class="btn btn-back btn-custom">
            <i class="fas fa-arrow-left me-2"></i>Back
        </a>
    </div>
        </div>
    </div>
</div>

<!-- Add AJAX for Cancel button only -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function() {
    // Cancel rental
    $('.cancel-btn').click(function() {
        const rentalId = $(this).data('rentalid');
        const token = localStorage.getItem("token");
        if (!token) {
            alert('You need to log in!');
            window.location.href = '/login?return_url=' + encodeURIComponent(window.location.pathname);
            return;
        }
        if (!confirm('Are you sure you want to cancel this rental?')) return;

        $.ajax({
            url: '/api/borrowing/rentals/cancel/' + rentalId,
            type: 'POST',
            headers: { 'Authorization': 'Bearer ' + token },
            success: function(res) {
                alert('Rental cancelled successfully!');
                location.reload();
            },
            error: function(xhr) {
                alert('Failed to cancel: ' + (xhr.responseText || 'An error occurred'));
            }
        });
    });
});
</script>
