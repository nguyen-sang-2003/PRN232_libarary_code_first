@page "/"
@using Newtonsoft.Json
@model LibararyWebApplication.Pages.cuong.HomeModel
@{
}

<style>

	.text-logo {
		font-size: 24px; /* hoặc cỡ phù hợp với giao diện */
		font-weight: bold;
		color: white; /* chỉnh màu tùy ý */
		font-family: 'Arial', sans-serif; /* chọn font bạn muốn */
		text-transform: uppercase; /* nếu cần chữ in hoa */
		padding: 10px 0;
	}

	.dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-toggle img {
		width: 24px;
		cursor: pointer;
	}

	.dropdown-menu {
		display: none;
		position: fixed;
		top: 60px; /* chỉnh theo chiều cao của navbar */
		right: 140px;
		background-color: #fff;
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
		width: 100px; /* Giảm chiều ngang */
		z-index: 999;
		border-radius: 4px;
		padding: 5px 0;
		font-size: 13px;
		color: #333;
	}

		.dropdown-menu.show {
			margin-left: 44rem;
		}

		.dropdown-menu a {
			display: flex; /* căn icon + chữ trên cùng một dòng */
			align-items: center; /* căn giữa theo chiều dọc */
			gap: 8px; /* khoảng cách giữa icon và chữ */
			padding: 8px 12px;
			color: #333 !important; /* màu chữ mặc định rõ ràng */
			text-decoration: none;
			font-size: 14px;
			white-space: nowrap;
		}

			.dropdown-menu a:hover {
				background-color: #f5f5f5;
			}

	.show {
		display: block;
	}

	.book-meta {
		display: flex;
		flex-direction: column;
		gap: 6px;
	}
	.book-img {
		width: 100%;
		height: 250px;
		object-fit: contain;
	}

	.book-container {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: 20px;
		padding: 20px;
	}

	.book-card {
		background-color: #fff;
		border-radius: 8px;
		overflow: hidden;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		transition: transform 0.2s ease;
		display: flex;
		flex-direction: column;
	}

		.book-card:hover {
			transform: translateY(-5px);
		}

	

	.book-body {
		padding: 15px;
		font-size: 14px;
	}

	.book-title {
		margin: 0 0 10px 0;
		font-size: 16px;
		font-weight: bold;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		text-align: center; /* căn giữa nội dung */
	}


		.book-title a {
			text-decoration: none;
			color: #007bff;
		}

	.loading,
	.no-books {
		grid-column: span 3;
		text-align: center;
		font-style: italic;
		margin-top: 40px;
	}
</style>

<!-- basic -->
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<!-- mobile metas -->
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="viewport" content="initial-scale=1, maximum-scale=1">
<!-- site metas -->
<title>Memorial Library</title>
<meta name="keywords" content="">
<meta name="description" content="">
<meta name="author" content="">
<!-- bootstrap css -->
<link rel="stylesheet" href="/TemplateLibraryHomePage/css/bootstrap.min.css">
<!-- style css -->
<link rel="stylesheet" href="/TemplateLibraryHomePage/css/style.css">
<!-- Responsive-->
<link rel="stylesheet" href="/TemplateLibraryHomePage/css/responsive.css">
<!-- fevicon -->
<link rel="icon" href="/TemplateLibraryHomePage/images/fevicon.png" type="image/gif" />
<!-- Scrollbar Custom CSS -->
<link rel="stylesheet" href="/TemplateLibraryHomePage/css/jquery.mCustomScrollbar.min.css">
<!-- Tweaks for older IEs-->
<!--[if lt IE 9]>
<script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script><![endif]-->
<!-- body -->
<div class="main-layout home_page">
	<!-- loader  -->
	<div class="loader_bg">
		<div class="loader"><img src="/TemplateLibraryHomePage/images/loading.gif" alt="#" /></div>
	</div>
	@await Html.PartialAsync("HomeLayoutHeader")
	<section class="slider_section">
		<div id="myCarousel" class="carousel slide banner-main" data-ride="carousel">
			<div class="carousel-inner">
				<div class="carousel-item active">
					<img class="first-slide" src="/TemplateLibraryHomePage/images/banner.jpg" alt="First slide">
					<div class="container">
						<div class="carousel-caption relative">
							<h1>The Best Libraries That<br> Every Book Lover Must<br> Visit!</h1>
							<p>
								Step into the world’s most inspiring libraries — from historic archives to cutting-edge digital spaces.<br>
								These iconic places are more than just shelves of books — they are sanctuaries of knowledge, imagination, and discovery.
							</p>

							<p>
								<strong>Explore, read, and be transformed.</strong><br>
								Whether you're a student, a researcher, or simply a curious soul, these libraries offer unforgettable experiences for every book lover.
							</p>
							<div class="button_section"> <a class="main_bt" href="#">Read More</a>  </div>
						</div>
					</div>
				</div>
			
		</div>
	</section>
	<!--Books -->
	<div class="Books">
		<div class="">
			<div class="row">
				<div class="col-md-10 offset-md-1">
					<div class="titlepage">
						<h2 style="margin-top: 50px; margin-left: 220px">Our <strong class="black">Books </strong></h2>
					</div>
				</div>
			</div>

			<div class="container-fluid mt-4">
				<div class="row">
					<!-- Left side: Search and Categories -->
					<div class="col-md-3 mb-4" >
						<div class="card mb-4">
							<div class="card-body">
								<h5 class="card-title">Search</h5>
								<input type="text" id="searchInput" class="form-control" placeholder="Search books...">
							</div>
						</div>
						<div class="card">
							<div class="card-body">
								<h5 class="card-title">Categories</h5>

								<script>
									@{
										string category_json = JsonConvert.SerializeObject(Model.categories);
									}
																		var category_arr = @(category_json);
								</script>
								<ul class="list-group" id="categoryList">
									@if (Model.categories != null)
									{
										@foreach (var cate in Model.categories)
										{
											<button class="list-group-item list-group-item-action text-start">
											<!--
											         ="() => {
											         				   SelectedCategoryId = cate.Id;
											         				   LoadBooksByCategoryId(cate.Id);
											         				   Console.WriteLine(cate.Id);
																			}"-->
														   
												@cate.Name
											</button>
										}
									}
									else
									{
										<li class="list-group-item"><em>Loading...</em></li>
									}
								</ul>

							</div>
						</div>
					</div>

					<!-- Right side: Book List -->

					<div class="book-container" style="padding-top: 0px;">
						@if (Model.books == null)
						{
							<div class="loading">Loading...</div>
						}
						else if (!Model.books.Any())
						{
							<p class="no-books">No books available.</p>
						}
						else
						{
							foreach (var book in Model.books)
							{
								<div class="book-card">
									<img src="@book.ImageBase64" alt="@book.Title" class="book-img" />
									<div class="book-body">
										<h3 class="book-title">
											<a href="/book/@book.Id">@book.Title</a>
										</h3>
										<div class="book-meta">
											<div class="meta-row"><strong>Author:</strong> <span>@book.AuthorName</span></div>
											<div class="meta-row"><strong>Published:</strong> <span>@book.PublishedDate.ToShortDateString()</span></div>
											<div class="meta-row"><strong>Available:</strong> <span>@book.AvailableCopies / @book.TotalCopies</span></div>
										</div>
									</div>
								</div>
							}
						}
					</div>
				</div>
			</div>

		</div>
	</div>
	<!-- end Books -->
	<!-- footer -->
	 <footer>
		 <div class="footer">
			 <div class="container">
				 <div class="row pdn-top-30">
					 <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12">
						 <div class="Follow">
							 <h3>Follow Us</h3>
						 </div>
						 <ul class="location_icon">
							 <li> <a href="#"><img src="/TemplateLibraryHomePage/icon/facebook.png"></a></li>
							 <li> <a href="#"><img src="/TemplateLibraryHomePage/icon/Twitter.png"></a></li>
							 <li> <a href="#"><img src="/TemplateLibraryHomePage/icon/linkedin.png"></a></li>
							 <li> <a href="#"><img src="/TemplateLibraryHomePage/icon/instagram.png"></a></li>
						 </ul>
					 </div>
					 <div class="col-xl-8 col-lg-8 col-md-8 col-sm-12">
						 <div class="Follow">
							 <h3>Newsletter</h3>
						 </div>
						 <input class="Newsletter" placeholder="Enter your email" type="Enter your email">
						 <button class="Subscribe">Subscribe</button>
					 </div>
				 </div>
			 </div>
		 </div>
	 </footer> 
	<!-- end footer -->
	<!-- Javascript files-->
	<!-- Search Book by title-->

	<script>
		document.getElementById("searchInput").addEventListener("input", function () {
			const searchTerm = this.value;

			fetch(`/api/v2/books?search=${encodeURIComponent(searchTerm)}`)
				.then(response => response.json())
				.then(data => {
					const bookListContainer = document.querySelector(".book-container");
					bookListContainer.innerHTML = ""; // Clear old books

					if (data.length === 0) {
						bookListContainer.innerHTML = "<p>No books found.</p>";
						return;
					}

					data.forEach(book => {
						const bookCard = `
									<div class="book-card">
				<img src="${book.imageBase64}" class="book-img" alt="${book.title}" />
				<div class="book-body">
					<h3 class="book-title">
						<a href="/book/${book.id}">${book.title}</a>
					</h3>
					<div class="book-meta">
						<div class="meta-row"><strong>Author:</strong> <span>${book.authorName}</span></div>
						<div class="meta-row"><strong>Published:</strong> <span>${new Date(book.publishedDate).toLocaleDateString()}</span></div>
						<div class="meta-row"><strong>Available:</strong> <span>${book.availableCopies} / ${book.totalCopies}</span></div>
					</div>
				</div>
			</div>
						`;
						bookListContainer.insertAdjacentHTML('beforeend', bookCard);
					});
				})
				.catch(error => {
					console.error("Search error:", error);
				});
		});


	</script>

	<script>
		const toggleBtn = document.querySelector('.dropdown-toggle');
		const menu = document.getElementById('dropdownMenu');

		toggleBtn.addEventListener('click', function (e) {
			e.preventDefault();
			menu.classList.toggle('show');
		});

		// Ẩn dropdown nếu click ra ngoài
		window.addEventListener('click', function (e) {
			if (!e.target.closest('.dropdown')) {
				menu.classList.remove('show');
			}
		});
	</script>

	<script src="/TemplateLibraryHomePage/js/jquery.min.js"></script>
	<script src="/TemplateLibraryHomePage/js/popper.min.js"></script>
	<script src="/TemplateLibraryHomePage/js/bootstrap.bundle.min.js"></script>
	<script src="/TemplateLibraryHomePage/js/jquery-3.0.0.min.js"></script>
	<script src="/TemplateLibraryHomePage/js/plugin.js"></script>
	<!-- sidebar -->
	<script src="/TemplateLibraryHomePage/js/jquery.mCustomScrollbar.concat.min.js"></script>
	<script src="/TemplateLibraryHomePage/js/custom.js"></script>
</div>
@{
	// private List<BookDto>? books;
	// private List<CategoryDto>? categories;

	// protected override async Task OnInitializedAsync()
	// {
	//     try
	//     {
	//         books = await Http.GetFromJsonAsync<List<BookDto>>($"{Navigation.BaseUri}api/v2/books");
	//         categories = await Http.GetFromJsonAsync<List<CategoryDto>>($"{Navigation.BaseUri}api/categories");
	//     }
	//     catch (Exception ex)
	//     {
	//         Console.Error.WriteLine($"Failed to fetch data: {ex.Message}");
	//         books = null;
	//         categories = null;
	//     }
	// }

	// void on_category_button_click()
	// {
	//     Console.WriteLine("button_click");
	// }

	// public int SelectedCategoryId { get; set; }

	// private async Task LoadBooksByCategoryId(int categoryId)
	// {
	//     try
	//     {
	//         books = await Http.GetFromJsonAsync<List<BookDto>>($"{Navigation.BaseUri}api/categories/{categoryId}/books");
	//     }
	//     catch (Exception ex)
	//     {
	//         Console.Error.WriteLine($"Failed to fetch books by category: {ex.Message}");
	//         books = null;
	//     }
	// }
}
